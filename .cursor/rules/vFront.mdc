---
globs: *.ts,*.css,*.html
alwaysApply: false
---
최우선 순위
1. 타입 안전성: TypeScript 도입.
2. ESlint 도입.
3. 파일 하나는 300라인 이하 유지.
4. 파일 하나는 하나의 역할만 담당.
5. 테스트 코드: Jest 적극 활용.
6. CSS 구조: 중복 스타일 통합 및 변수 활용
7. Vite 도입으로 최적화

## 작업 방식 일관성 지침

### 파일 분할/통합 원칙
- **분할 기준**: 300라인 초과 시 또는 명확한 기능별 분리 필요 시
- **통합 기준**: 관련 기능이 3개 이하이고 300라인 이하일 때
- **일관성 유지**: 한 번 정한 구조는 변경 사유가 명확할 때만 수정

### CSS 구조 관리
- **컴포넌트별 분류**: 기능별 폴더 구조 유지
- **공통 스타일**: ui/, common/ 폴더에 배치
- **중복 제거**: 동일한 스타일은 공통 파일로 통합
- **변수 활용**: 하드코딩 대신 CSS 변수 사용

### 코드 리팩토링 원칙
- **명확한 계획**: 리팩토링 전 목적과 방법 명시
- **단계적 진행**: 큰 변경은 작은 단위로 분할하여 진행
- **검증 필수**: 각 단계마다 동작 확인
- **문서화**: 구조 변경 시 이유와 영향 범위 기록

### 품질 관리
- **SRP 준수**: 단일 책임 원칙 엄격 적용
- **의존성 최소화**: 불필요한 의존성 제거
- **재사용성**: 공통 로직은 별도 모듈로 분리
- **테스트 커버리지**: 주요 기능은 테스트 코드 작성최우선 순위
1. 타입 안전성: TypeScript 도입.
2. ESlint 도입.
3. 파일 하나는 300라인 이하 유지.
4. 파일 하나는 하나의 역할만 담당.
5. 테스트 코드: Jest 적극 활용.
6. CSS 구조: 중복 스타일 통합 및 변수 활용
7. Vite 도입으로 최적화

## 작업 방식 일관성 지침

### 파일 분할/통합 원칙
- **분할 기준**: 300라인 초과 시 또는 명확한 기능별 분리 필요 시
- **통합 기준**: 관련 기능이 3개 이하이고 300라인 이하일 때
- **일관성 유지**: 한 번 정한 구조는 변경 사유가 명확할 때만 수정

### CSS 구조 관리
- **컴포넌트별 분류**: 기능별 폴더 구조 유지
- **공통 스타일**: ui/, common/ 폴더에 배치
- **중복 제거**: 동일한 스타일은 공통 파일로 통합
- **변수 활용**: 하드코딩 대신 CSS 변수 사용

### 코드 리팩토링 원칙
- **명확한 계획**: 리팩토링 전 목적과 방법 명시
- **단계적 진행**: 큰 변경은 작은 단위로 분할하여 진행
- **검증 필수**: 각 단계마다 동작 확인
- **문서화**: 구조 변경 시 이유와 영향 범위 기록

### 품질 관리
- **SRP 준수**: 단일 책임 원칙 엄격 적용
- **의존성 최소화**: 불필요한 의존성 제거
- **재사용성**: 공통 로직은 별도 모듈로 분리
- **테스트 커버리지**: 주요 기능은 테스트 코드 작성