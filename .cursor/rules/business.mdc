---
description:
globs:
alwaysApply: false
---

- 이 문서를 참조했을 시 답변 전, [Business] 단어 출력

### 범위(업무 스코프)
- **목표**: “Binance Futures” 매수/매도 리모콘(원클릭) + 현재 포지션 조회
- **대상**: 단일 사용자/팀 내부용 마이크로 서비스
- **제한**: 필수값 입력 + 최소 UI/UX. 기타 기능 제외(차트/주문내역/조건부주문 등 불포함)

### 핵심 기능 요구사항
- **주문 실행(시장가)**: 매수/매도 클릭 시 즉시 시장가 주문 전송
- **필수 입력값**: `종목(symbol)`, `금액(USDT)`, `레버리지`, `사이드(매수/매도)`
- **포지션 조회**: 현재 보유 포지션 목록/핵심 지표 표시

### 비기능 요구사항
- **오류율 0%**: 유효성/필터(수량/최소주문금액/스텝) 준수, 실패 시 명확 메시지
- **성능**: 클릭→주문접수 API 호출 왕복 p50 < 800ms (네트워크 제외)
- **보안**: API Secret 서버 격리 보관, HTTPS 필수, 로그에 민감정보 금지
- **신뢰성**: Binance 레이트리밋/일시 장애 시 재시도(최대 1회) 및 사용자 안내

### 업무 흐름(주요 시나리오)
1) 사용자: `종목/금액/레버리지/사이드` 입력 → 버튼 클릭
2) 서버:
   - 심볼 메타(필터/스텝/최소금액) 캐시 조회 → 최신 `markPrice` 조회
   - 필요 시 해당 심볼 `레버리지 설정`(Binance API)
   - 수량 = 금액(USDT)/markPrice 계산 → lotSize/stepSize 반올림 → minNotional 검증
   - `시장가 주문` 전송 → 결과 반환
3) UI: 즉시 결과 토스트/배지 표시 → `포지션` 패널 자동 새로고침(폴링 2초)

### UI/UX 설계(최소)
- **단일 화면: Futures Remote**
  - 상단: `종목` 드롭다운, `금액(USDT)` 입력, `레버리지` 슬라이더(1–25), `사이드` 토글(매수/매도)
  - 중앙: 큰 액션 버튼 2개: [매수] [매도] (선택된 사이드에 따라 활성 강조)
  - 하단: `현재 포지션` 테이블(컬럼: 심볼, 포지션수량, 진입가, 레버리지, 미실현PnL, 마진모드) + 새로고침 인디케이터
- **피드백**: 성공/실패 알림, 실패 사유(수량/금액/레버리지/증거금/필터 위반) 간결 표기
- **기본값**: 마진모드 Cross, 포지션 모드 One-way, TimeInForce IOC/GTX 불사용(시장가)

### 최소 API 설계(내부 백엔드)
- **POST `/api/trade`** 시장가 주문 생성
  요청:
  ```json
  { "symbol": "BTCUSDT", "notional": 50, "leverage": 10, "side": "BUY" }
  ```
  응답:
  ```json
  { "orderId": "123456", "symbol": "BTCUSDT", "side": "BUY", "executedQty": "0.001", "avgPrice": "50000.0", "status": "FILLED" }
  ```
- **GET `/api/positions`** 현재 포지션 조회
  응답:
  ```json
  [{ "symbol": "BTCUSDT", "positionAmt": "0.001", "entryPrice": "50000.0", "leverage": 10, "unRealizedProfit": "1.23", "marginType": "cross" }]
  ```

### Binance 연계(업무 규칙)
- **레버리지 설정**: 주문 전 심볼별 설정(이미 설정된 값과 다르면 갱신)
- **수량 계산**: notional/markPrice → `stepSize` 반올림 → `minQty/minNotional` 검증
- **주문 유형**: MARKET, `reduceOnly` 기본 false
- **레이트리밋**: `exchangeInfo`/`markPrice` 캐싱(예: 30초), 실패 시 지수 backoff 1회

### 유효성 검증
- **입력값**: symbol 필수/화이트리스트, notional > 0, leverage ∈ [1,25], side ∈ {BUY, SELL}
- **거래 필터**: stepSize/pricePrecision/minNotional 체크 실패 시 주문 불가

### 보안/인증
- **키 관리**: `BINANCE_API_KEY/SECRET` 서버 환경변수, 클라이언트 미노출
- **네트워크**: 서버→Binance는 HMAC 서명, 클라이언트→서버는 HTTPS + 단일 사용자 비밀번호 토큰
- **로그**: 요청 ID/결과만 기록, 금액/심볼 익명화 옵션, 비밀값 비저장

### 배포/환경
- **런타임**: 단일 서비스(백엔드 + 정적 프런트), 도메인 제한 CORS
- **백엔드 기술 스택**: Python FastAPI 권장(내부 표준). 대안 스택 사용 시 사전 합의 필요.
- **테스트넷 토글**: `USE_TESTNET=true` 시 testnet URL 사용, 기본값 testnet로 시작
- **관측성**: 최소 Access/Order 로그, 에러 알림(Slack/Webhook) 선택

### 테스트(핵심 시나리오)
- 정상: BTCUSDT, 50 USDT, 10x, BUY → FILLED
- 경계: 최소 notional 바로 위/아래 값
- 실패: 잔고 부족, 심볼 미허용, 레버리지 범위 초과, 레이트리밋

### 제외 범위(Out of Scope)
- 지정가/조건부/트레일링/TP·SL, 히스토리, 차트, 알림, 계정 잔고/이체

### 성공 지표
- 주문 성공률 ≥ 99.9%, 오류 재시도 후 실패율 ≤ 0.05%
- 클릭→주문접수 p50 < 800ms, 포지션 패널 최신화 지연 < 2.5s

### 리스크/대응
- 급변동 슬리피지: 시장가 특성 고지 및 금액 기준 주문으로 과도 체결 방지
- Binance 장애/지연: 재시도·사용자 안내, 테스트넷/프로드 분리

- 요약
  - 최소 기능(주문/포지션)만 담은 단일 마이크로 서비스/단일 화면 설계
  - 서버에서 레버리지/수량/필터/서명 일괄 처리로 오류율 최소화
  - 보안·성능·유지보수 기준을 충족하며 스코프 크립 방지
